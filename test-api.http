### ==========================================
### TEST API - BACKEND AGENTES IA
### ==========================================
### Instrucciones:
### 1. Asegurate de tener el servidor corriendo: npm run dev
### 2. Click en "Send Request" arriba de cada endpoint
### 3. Guard√° los IDs que te devuelven para usar en los siguientes pasos
### ==========================================

@baseUrl = http://localhost:4000
@agentId = REEMPLAZAR_CON_ID_DEL_AGENTE
@conversationId = REEMPLAZAR_CON_ID_DE_CONVERSACION

### ==========================================
### üè• HEALTH CHECK & INFO
### ==========================================

### 1. Health Check - Verificar que el servidor est√© corriendo
GET {{baseUrl}}/health

### 2. Informaci√≥n del API - Ver todos los endpoints disponibles
GET {{baseUrl}}/

### ==========================================
### ü§ñ AGENTES
### ==========================================

### 3. Listar todos los agentes
GET {{baseUrl}}/api/agents

### 4. Crear un agente b√°sico
POST {{baseUrl}}/api/agents
Content-Type: application/json

{
  "name": "Asistente General",
  "description": "Un asistente √∫til para responder preguntas",
  "system_prompt": "Eres un asistente amigable y servicial que ayuda a los usuarios.",
  "model": "gpt-4-turbo-preview",
  "temperature": 0.7,
  "tools": ["calculator", "datetime"]
}

### 5. Crear un agente matem√°tico
POST {{baseUrl}}/api/agents
Content-Type: application/json

{
  "name": "Profesor de Matem√°ticas",
  "description": "Experto en resolver problemas matem√°ticos",
  "system_prompt": "Eres un profesor de matem√°ticas que explica paso a paso. Siempre que veas n√∫meros, usa la calculadora.",
  "model": "gpt-4-turbo-preview",
  "temperature": 0.3,
  "tools": ["calculator"]
}

### 6. Crear agente programador
POST {{baseUrl}}/api/agents
Content-Type: application/json

{
  "name": "Asistente de C√≥digo",
  "description": "Ayuda con programaci√≥n en TypeScript y Python",
  "system_prompt": "Eres un experto programador que ayuda a escribir c√≥digo limpio y eficiente.",
  "model": "gpt-4-turbo-preview",
  "temperature": 0.5,
  "tools": ["datetime"]
}

### 7. Obtener un agente espec√≠fico
# ‚ö†Ô∏è Reemplaz√° {{agentId}} con un ID real
GET {{baseUrl}}/api/agents/{{agentId}}

### 8. Actualizar un agente
# ‚ö†Ô∏è Reemplaz√° {{agentId}} con un ID real
PUT {{baseUrl}}/api/agents/2df4348e-b923-4ac3-916c-ff551ef8b434
Content-Type: application/json

{
  "name": "Asistente Actualizado",
  "temperature": 0.8,
  "description": "Descripci√≥n actualizada"
}

### 9. Eliminar un agente
# ‚ö†Ô∏è Reemplaz√° {{agentId}} con un ID real
DELETE {{baseUrl}}/api/agents/{{agentId}}

### ==========================================
### üí¨ CONVERSACIONES
### ==========================================

### 10. Listar todas las conversaciones
GET {{baseUrl}}/api/conversations

### 11. Listar conversaciones de un agente espec√≠fico
# ‚ö†Ô∏è Reemplaz√° {{agentId}} con un ID real
GET {{baseUrl}}/api/conversations?agent_id=2df4348e-b923-4ac3-916c-ff551ef8b434

### 12. Crear una nueva conversaci√≥n
# ‚ö†Ô∏è IMPORTANTE: Primero cre√° un agente (paso 4), copi√° su ID y pegalo abajo
POST {{baseUrl}}/api/conversations
Content-Type: application/json

{
  "agent_id": "69840100-0326-431b-af6e-891856b357c1",
  "title": "Mi primera conversaci√≥n"
}

### 13. Crear conversaci√≥n sobre matem√°ticas
POST {{baseUrl}}/api/conversations
Content-Type: application/json

{
  "agent_id": "{{agentId}}",
  "title": "Ayuda con Matem√°ticas"
}

### 14. Obtener una conversaci√≥n con sus mensajes
# ‚ö†Ô∏è Reemplaz√° {{conversationId}} con un ID real
GET {{baseUrl}}/api/conversations/{{conversationId}}

### 15. Actualizar t√≠tulo de conversaci√≥n
# ‚ö†Ô∏è Reemplaz√° {{conversationId}} con un ID real
PUT {{baseUrl}}/api/conversations/77dbf4b8-d5ec-4ace-864f-e7aaf8ce95ee
Content-Type: application/json

{
  "title": "Conversaci√≥n de datetime"
}

### 16. Eliminar una conversaci√≥n
# ‚ö†Ô∏è Reemplaz√° {{conversationId}} con un ID real
DELETE {{baseUrl}}/api/conversations/{{conversationId}}

### ==========================================
### üí≠ CHAT - ENVIAR MENSAJES
### ==========================================

### 17. Enviar mensaje simple
# ‚ö†Ô∏è IMPORTANTE: Necesitas agent_id y conversation_id v√°lidos
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "77dbf4b8-d5ec-4ace-864f-e7aaf8ce95ee",
  "agent_id": "69840100-0326-431b-af6e-891856b357c1",
  "message": "que hora es ahora?"
}

### 18. Enviar mensaje con c√°lculo matem√°tico
# El agente debe tener la tool "calculator" habilitada
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "{{conversationId}}",
  "agent_id": "{{agentId}}",
  "message": "¬øCu√°nto es 25 * 4 + 17?"
}

### 19. Preguntar por la fecha/hora
# El agente debe tener la tool "datetime" habilitada
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "{{conversationId}}",
  "agent_id": "{{agentId}}",
  "message": "¬øQu√© fecha y hora es ahora?"
}

### 20. Pregunta compleja
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "{{conversationId}}",
  "agent_id": "{{agentId}}",
  "message": "Explicame qu√© es la inteligencia artificial en t√©rminos simples"
}

### 21. Obtener todos los mensajes de una conversaci√≥n
# ‚ö†Ô∏è Reemplaz√° {{conversationId}} con un ID real
GET {{baseUrl}}/api/chat/messages/{{conversationId}}

### ==========================================
### üéØ FLUJO COMPLETO DE PRUEBA
### ==========================================
### Segu√≠ estos pasos en orden:

### PASO 1: Crear un agente
POST {{baseUrl}}/api/agents
Content-Type: application/json

{
  "name": "Mi Agente de Prueba",
  "description": "Agente para testing completo",
  "system_prompt": "Eres un asistente √∫til y amigable.",
  "model": "gpt-4-turbo-preview",
  "temperature": 0.7,
  "tools": ["calculator", "datetime"]
}
# ‚Üí Guard√° el "id" que te devuelve

### PASO 2: Crear una conversaci√≥n
# Reemplaz√° TU_AGENT_ID con el id del paso anterior
POST {{baseUrl}}/api/conversations
Content-Type: application/json

{
  "agent_id": "TU_AGENT_ID",
  "title": "Conversaci√≥n de prueba"
}
# ‚Üí Guard√° el "id" que te devuelve

### PASO 3: Enviar primer mensaje
# Reemplaz√° TU_CONVERSATION_ID y TU_AGENT_ID
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "TU_CONVERSATION_ID",
  "agent_id": "TU_AGENT_ID",
  "message": "Hola! Presentate y contame qu√© puedes hacer"
}

### PASO 4: Enviar segundo mensaje con c√°lculo
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "conversation_id": "TU_CONVERSATION_ID",
  "agent_id": "TU_AGENT_ID",
  "message": "Calcul√° 150 + 275"
}

### PASO 5: Ver todo el historial
GET {{baseUrl}}/api/chat/messages/TU_CONVERSATION_ID

### ==========================================
### üìù NOTAS IMPORTANTES
### ==========================================
### 
### - Asegurate de tener el .env configurado con:
###   - SUPABASE_URL
###   - SUPABASE_SERVICE_ROLE_KEY
###   - OPENAI_API_KEY
###
### - Las tools disponibles son:
###   - calculator: realiza c√°lculos matem√°ticos
###   - datetime: obtiene fecha y hora actual
###   - web_search: b√∫squeda web (placeholder)
###
### - Para usar en Postman:
###   1. Import√° este archivo
###   2. Cambi√° las variables {{agentId}} y {{conversationId}}
###   3. O us√° los valores directamente en el JSON
###
### - Para usar con REST Client (VS Code):
###   1. Instal√° la extensi√≥n "REST Client"
###   2. Hac√© click en "Send Request"
###   3. Modifica las variables al inicio del archivo
###
### ==========================================
